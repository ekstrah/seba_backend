openapi: 3.0.0
info:
  title: E-Commerce REST API
  version: 1.0.0
  description: API documentation for the e-commerce backend
servers:
  - url: http://localhost:8080/api
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [admin, farmer, consumer]
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
    AuthRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    Address:
      type: object
      properties:
        _id:
          type: string
        street:
          type: string
        city:
          type: string
        zip:
          type: string
        country:
          type: string
    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
        stock:
          type: integer
        farmer:
          $ref: '#/components/schemas/User'
        reviews:
          type: array
          items:
            type: string
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
    Order:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total:
          type: number
        status:
          type: string
        paymentInfo:
          type: object
        createdAt:
          type: string
          format: date-time
    OrderItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        price:
          type: number
    Cart:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
    CartItem:
      type: object
      properties:
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
    Review:
      type: object
      properties:
        _id:
          type: string
        user:
          $ref: '#/components/schemas/User'
        product:
          $ref: '#/components/schemas/Product'
        rating:
          type: number
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '201':
          description: User created and verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
  /auth/login:
    post:
      tags: [Auth]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
  /auth/forgot-password:
    post:
      tags: [Auth]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: User not found
  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successful
        '400':
          description: Invalid or expired token
  /auth/verify-email:
    post:
      tags: [Auth]
      summary: Verify email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified
        '400':
          description: Invalid or expired token
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logout successful
  /auth/check-auth:
    get:
      tags: [Auth]
      summary: Check authentication status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Not authenticated
  /users/contact:
    get:
      tags: [Users]
      summary: Get user contact information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User contact info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /users/addresses:
    get:
      tags: [Users]
      summary: Get user addresses
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
  /users/payment-methods:
    get:
      tags: [Users]
      summary: List saved Stripe payment methods
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    brand:
                      type: string
                    last4:
                      type: string
        '401':
          description: Unauthorized
  /users/farmer/{id}:
    get:
      tags: [Users]
      summary: Get farmer details by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Farmer details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  farmer:
                    $ref: '#/components/schemas/User'
        '404':
          description: Farmer not found
  /products:
    get:
      tags: [Products]
      summary: Get all products
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Products]
      summary: Create a new product (farmer only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
  /products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags: [Products]
      summary: Update product (farmer only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          description: Unauthorized
        '404':
          description: Product not found
    delete:
      tags: [Products]
      summary: Delete product (farmer only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted
        '401':
          description: Unauthorized
        '404':
          description: Product not found
  /products/categories:
    get:
      tags: [Products]
      summary: Get all product categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/create:
    post:
      tags: [Categories]
      summary: Create a new category (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
  /categories/readAll:
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /orders:
    get:
      tags: [Orders]
      summary: Get all orders (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
    post:
      tags: [Orders]
      summary: Create order from cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
  /orders/my-orders:
    get:
      tags: [Orders]
      summary: Get orders by consumer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of consumer's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
  /orders/farmer-orders:
    get:
      tags: [Orders]
      summary: Get orders by farmer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of farmer's orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
  /orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found
    patch:
      tags: [Orders]
      summary: Update order status (admin/farmer only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
      responses:
        '200':
          description: Order status updated
        '401':
          description: Unauthorized
        '404':
          description: Order not found
  /orders/{id}/payment:
    patch:
      tags: [Orders]
      summary: Update payment status (admin/farmer only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentStatus:
                  type: string
      responses:
        '200':
          description: Payment status updated
        '401':
          description: Unauthorized
        '404':
          description: Order not found
  /orders/{id}/cancel:
    post:
      tags: [Orders]
      summary: Cancel order
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order cancelled
        '401':
          description: Unauthorized
        '404':
          description: Order not found
  /orders/guest/payment-intent:
    post:
      tags: [Orders]
      summary: Create payment intent for guest checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
      responses:
        '200':
          description: Payment intent created
        '400':
          description: Invalid request
  /orders/guest/order:
    post:
      tags: [Orders]
      summary: Create guest order after payment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Guest order created
  /cart:
    get:
      tags: [Cart]
      summary: Get or create cart for user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
  /cart/add:
    post:
      tags: [Cart]
      summary: Add item to cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Item added to cart
        '401':
          description: Unauthorized
  /cart/remove:
    post:
      tags: [Cart]
      summary: Remove item from cart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Item removed from cart
        '401':
          description: Unauthorized
  /cart/update:
    post:
      tags: [Cart]
      summary: Update cart item quantity
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
      responses:
        '200':
          description: Cart item updated
        '401':
          description: Unauthorized
  /cart/clear:
    post:
      tags: [Cart]
      summary: Clear cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart cleared
        '401':
          description: Unauthorized
  /reviews:
    post:
      tags: [Reviews]
      summary: Create a new review
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created
        '401':
          description: Unauthorized
    get:
      tags: [Reviews]
      summary: Get all reviews (optionally by product or farmer)
      parameters:
        - in: query
          name: type
          schema:
            type: string
          description: 'Type of review: product or farmer'
        - in: query
          name: id
          schema:
            type: string
          description: 'ID of product or farmer'
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /reviews/{id}:
    put:
      tags: [Reviews]
      summary: Update a review
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated
        '401':
          description: Unauthorized
        '404':
          description: Review not found
    delete:
      tags: [Reviews]
      summary: Delete a review
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Review deleted
        '401':
          description: Unauthorized
        '404':
          description: Review not found
  /address:
    get:
      tags: [Address]
      summary: Get all addresses for user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          description: Unauthorized
    post:
      tags: [Address]
      summary: Add a new address
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Address added
        '401':
          description: Unauthorized
    put:
      tags: [Address]
      summary: Update an address
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Address'
      responses:
        '200':
          description: Address updated
        '401':
          description: Unauthorized
    delete:
      tags: [Address]
      summary: Delete an address
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressId:
                  type: string
      responses:
        '204':
          description: Address deleted
        '401':
          description: Unauthorized 